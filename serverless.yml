service: url-shortener

frameworkVersion: "4"
useDotenv: true
configValidationMode: error

plugins:
  - serverless-domain-manager

provider:
  name: aws
  runtime: python3.11
  region: eu-west-1
  stage: dev
  logs:
    restApi: ${param:restApiLogsEnabled}
  environment:
    MAINTAINER_EMAIL: "${env:MAINTAINER}"
    BUCKET_NAME: !Ref RedirectBucket
    LINKS_TABLE: !Ref LinksTable
    USERS_TABLE: !Ref UsersTable
    UNIQUES_TABLE: !Ref UniquesTable
    COUNTERS_TABLE: !Ref CountersTable
  apiGateway:
    shouldStartNameWithService: true
    request:
      schemas:
        create-link-model:
          name: CreateLink
          schema: ${file(models/create-link.schema.json)}
        update-link-model:
          name: UpdateLink
          schema: ${file(models/update-link.schema.json)}
        update-user-model:
          name: UpdateUser
          schema: ${file(models/update-user.schema.json)}
  iam:
    role:
      statements:
        - Effect: "Allow"
          Action:
            - ses:SendEmail
          Resource: "arn:aws:ses:*:*:identity/${env:MAINTAINER}"
        - Effect: "Allow"
          Action:
            - s3:ListBucket
          Resource: !GetAtt RedirectBucket.Arn
        - Effect: "Allow"
          Action:
            - s3:GetObject
            - s3:PutObject
            - s3:PutObjectAcl
            - s3:DeleteObject
          Resource: !Sub "${RedirectBucket.Arn}/*"
        - Effect: "Allow"
          Action:
            - dynamodb:UpdateItem
          Resource:
            - !GetAtt CountersTable.Arn
            - !GetAtt LinksTable.Arn
            - !GetAtt UsersTable.Arn
        - Effect: "Allow"
          Action:
            - dynamodb:PutItem
          Resource:
            - !GetAtt CountersTable.Arn
            - !GetAtt LinksTable.Arn
            - !GetAtt UniquesTable.Arn
            - !GetAtt UsersTable.Arn
        - Effect: "Allow"
          Action:
            - dynamodb:DeleteItem
          Resource:
            - !GetAtt LinksTable.Arn
            - !GetAtt UniquesTable.Arn
            - !GetAtt UsersTable.Arn
        - Effect: "Allow"
          Action:
            - dynamodb:Scan
            - dynamodb:GetItem
          Resource:
            - !GetAtt LinksTable.Arn
            - !GetAtt UniquesTable.Arn
            - !GetAtt UsersTable.Arn
        - Effect: "Allow"
          Action:
            - dynamodb:Query
            - dynamodb:BatchWriteItem
          Resource:
            - !GetAtt LinksTable.Arn
            - !GetAtt UniquesTable.Arn
        - Effect: "Allow"
          Action:
            - dynamodb:Query
          Resource:
            - !Sub "${LinksTable.Arn}/index/User-index"
            - !Sub "${UsersTable.Arn}/index/Email-index"

resources:
  - Conditions:
      IsPro: !Equals ["${sls:stage}", pro]
      IsDev: !Not [Condition: IsPro]

  - ${file(resources/db.cf.yml)}
  - ${file(resources/users.cf.yml)}
  - ${file(resources/web.cf.yml)}

stages:
  default:
    params:
      userPoolName: ${self:custom.rootDomain}-users-${sls:stage}
  dev:
    params:
      apiPath: dev
      corsOrigin: "http://localhost:8080"
      restApiLogsEnabled: false
      accessTokenValidityInMins: 60
      idTokenValidityInMins: 60
      refreshTokenValidityInMins: 600
      redirectBucketName: dev.${self:custom.rootDomain}
  pro:
    params:
      apiPath: v1
      corsOrigin: ${self:custom.rootDomain}
      restApiLogsEnabled: true
      accessTokenValidityInMins: 5
      idTokenValidityInMins: 5
      refreshTokenValidityInMins: 60
      redirectBucketName: ${self:custom.rootDomain}

custom:
  rootDomain: ${env:DOMAIN_NAME}
  certificateArn: ${env:CERTIFICATE_ARN}
  customDomain:
    autoDomain: true
    domainName: api.${env:DOMAIN_NAME}
    certificateArn: ${env:CERTIFICATE_ARN}
    basePath: ${param:apiPath}
    createRoute53Record: true
  authMapping: |-
    "auth": {
      "user": "$context.authorizer.claims.email"
    }

package:
  patterns:
    - "!**/*"
    - src/user/*.py
    - src/link/*.py
    - src/admin/*.py
    - src/common/*.py

functions:
  validateUserSignUp:
    handler: src/user/api.validate_user_signup
    description: Denies access to non activated user accounts while sending request-to-join emails the first time
    events:
      - cognitoUserPool:
          pool: ${param:userPoolName}
          trigger: PreSignUp
          existing: true
  updateUser:
    handler: src/user/api.update_user
    description: Updates a user details such as role or status (admin only)
    events:
      - http:
          path: /users/{userId}
          integration: lambda
          method: patch
          request:
            schemas:
              application/json: update-user-model
            template:
              application/x-www-form-urlencoded: null
              application/json: |
                {
                  "data": $input.json("$"),
                  "user_id": "$input.params().path.get('userId')",
                  ${self:custom.authMapping}
                }
            passThrough: NEVER
          response:
            statusCodes:
              200: &okResponse
                pattern: ""
              400: &userError
                pattern: "(ValidationError|ApplicationError): .*"
                template: |
                  #set ($msg = $input.path("$.errorMessage"))
                  #set ($index = $msg.indexOf(':') + 2)
                  { "message": "$msg.substring($index)" }
              403: &authError
                <<: *userError
                pattern: "AuthorizationError: .*"
              404: &notFoundError
                <<: *userError
                pattern: "NotFoundError: .*"
              500: &unexpectedError
                pattern: '.*\berror\b.*'
                template: '{ "message": "something went wrong" }'
          authorizer: &auth
            name: CognitoAuthorizer
            type: COGNITO_USER_POOLS
            arn:
              Fn::GetAtt:
                - CognitoUserPool
                - Arn
  listUsers:
    handler: src/user/api.list_users
    description: Lists all the users (admin only)
    events:
      - http:
          path: /users
          integration: lambda
          method: get
          request:
            template:
              application/x-www-form-urlencoded: null
              application/json: |
                {
                  ${self:custom.authMapping}
                }
            passThrough: NEVER
          response:
            statusCodes:
              200: *okResponse
              403: *authError
              500: *unexpectedError
          authorizer: *auth
  deleteUser:
    handler: src/user/api.delete_user
    description: Deletes a user (admin only)
    events:
      - http:
          path: /users/{userId}
          integration: lambda
          method: delete
          request:
            template:
              application/x-www-form-urlencoded: null
              application/json: |
                {
                  "user_id": "$input.params().path.get('userId')",
                  ${self:custom.authMapping}
                }
            passThrough: NEVER
          response:
            statusCodes:
              200: *okResponse
              403: *authError
              404: *notFoundError
              500: *unexpectedError
          authorizer: *auth
  apiInfo:
    handler: src/link/api.get_info
    description: Returns relevant information about the app such as the base URL
    events:
      - http:
          path: /info
          integration: lambda
          cors: true
          method: get
          response:
            statusCodes:
              200:
                pattern: ""
  createLink:
    handler: src/link/api.create_link
    description: Creates a new link pointing to the URL provided
    events:
      - http:
          path: /links
          integration: lambda
          method: post
          cors:
            origin: "${param:corsOrigin}"
          request:
            schemas:
              application/json: create-link-model
            template:
              application/x-www-form-urlencoded: null
              application/json: |
                {
                  "data": $input.json("$"),
                  ${self:custom.authMapping}
                }
            passThrough: NEVER
          response:
            statusCodes:
              201: *okResponse
              400: *userError
              403: *authError
              500: *unexpectedError
          authorizer: *auth
  listLinks:
    handler: src/link/api.list_links
    description: Lists all the links owned by the current user
    events:
      - http:
          path: /links
          integration: lambda
          method: get
          cors:
            origin: "${param:corsOrigin}"
          request:
            template:
              application/x-www-form-urlencoded: null
              application/json: |
                {
                  ${self:custom.authMapping}
                }
          response:
            statusCodes:
              200: *okResponse
              403: *authError
              500: *unexpectedError
          authorizer: *auth
  listLinksAsAdmin:
    handler: src/admin/api.list_all_links
    description: Lists all the links
    events:
      - http:
          path: /admin/links
          integration: lambda
          method: get
          request:
            template:
              application/x-www-form-urlencoded: null
              application/json: |
                {
                  ${self:custom.authMapping}
                }
          response:
            statusCodes:
              200: *okResponse
              403: *authError
              500: *unexpectedError
          authorizer: *auth
  deleteLink:
    handler: src/link/api.delete_link
    description: Deletes a link given its backhalf only if owned by the current user
    events:
      - http:
          path: /links/{backhalf}
          integration: lambda
          method: delete
          cors:
            origin: "${param:corsOrigin}"
          request:
            template:
              application/x-www-form-urlencoded: null
              application/json: |
                {
                  "backhalf": "$input.params().path.get('backhalf')",
                  ${self:custom.authMapping}
                }
          response:
            statusCodes:
              204: *okResponse
              403: *authError
              500: *unexpectedError
          authorizer: *auth
  deleteLinkAsAdmin:
    handler: src/admin/api.delete_link
    description: Deletes a link given its backhalf
    events:
      - http:
          path: /admin/links/{backhalf}
          integration: lambda
          method: delete
          request:
            template:
              application/x-www-form-urlencoded: null
              application/json: |
                {
                  "backhalf": "$input.params().path.get('backhalf')",
                  ${self:custom.authMapping}
                }
          response:
            statusCodes:
              204: *okResponse
              403: *authError
              404: *notFoundError
              500: *unexpectedError
          authorizer: *auth
  deleteAllLinks:
    handler: src/admin/api.delete_all_links
    description: Deletes all the links
    events:
      - http:
          path: /admin/links
          integration: lambda
          method: delete
          cors:
            origin: "${param:corsOrigin}"
          request:
            template:
              application/x-www-form-urlencoded: null
              application/json: |
                {
                  ${self:custom.authMapping}
                }
          response:
            statusCodes:
              204: *okResponse
              403: *authError
              500: *unexpectedError
          authorizer: *auth
  updateLink:
    handler: src/link/api.update_link
    description: Updates the link identified by its backhalf only if owned by the current user
    events:
      - http:
          path: /links/{backhalf}
          integration: lambda
          method: patch
          cors:
            origin: "${param:corsOrigin}"
          request:
            schemas:
              application/json: update-link-model
            template:
              application/x-www-form-urlencoded: null
              application/json: |
                {
                  "data": $input.json("$"),
                  "backhalf": "$input.params().path.get('backhalf')",
                  ${self:custom.authMapping}
                }
            passThrough: NEVER
          response:
            statusCodes:
              200: *okResponse
              400: *userError
              403: *authError
              500: *unexpectedError
          authorizer: *auth
  updateLinkAsAdmin:
    handler: src/admin/api.update_link
    description: Updates the link identified by its backhalf
    events:
      - http:
          path: /admin/links/{backhalf}
          integration: lambda
          method: patch
          cors:
            origin: "${param:corsOrigin}"
          request:
            schemas:
              application/json: update-link-model
            template:
              application/x-www-form-urlencoded: null
              application/json: |
                {
                  "data": $input.json("$"),
                  "backhalf": "$input.params().path.get('backhalf')",
                  ${self:custom.authMapping}
                }
            passThrough: NEVER
          response:
            statusCodes:
              200: *okResponse
              400: *userError
              404: *notFoundError
              403: *authError
              500: *unexpectedError
          authorizer: *auth
