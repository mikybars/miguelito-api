Resources:
  CognitoUserPool:
    Type: AWS::Cognito::UserPool
    Properties:
      UserPoolName: ${param:userPoolName}

  CognitoUserPoolDomain:
    Type: AWS::Cognito::UserPoolDomain
    Condition: IsPro
    DependsOn: RootDomainDNSRecord
    Properties:
      CustomDomainConfig:
        CertificateArn: "${self:custom.certificateArn}"
      Domain: auth.${self:custom.rootDomain}
      UserPoolId: !Ref CognitoUserPool

  CognitoUserPoolDomainPrefix:
    Type: AWS::Cognito::UserPoolDomain
    Condition: IsDev
    Properties:
      Domain: !Join ['-', !Split ['.', 'dev.${self:custom.rootDomain}']]
      UserPoolId: !Ref CognitoUserPool

  AuthDomainDNSRecord:
    Type: AWS::Route53::RecordSet
    Condition: IsPro
    Properties:
      AliasTarget:
        HostedZoneId: Z2FDTNDATAQYW2
        DNSName: !GetAtt CognitoUserPoolDomain.CloudFrontDistribution
        EvaluateTargetHealth: false
      HostedZoneName: ${self:custom.rootDomain}.
      Name: auth.${self:custom.rootDomain}
      Type: A

  CognitoUserPoolClient:
    Type: AWS::Cognito::UserPoolClient
    DependsOn: CognitoUserPoolIdentityProvider
    Properties:
      ClientName: ${self:custom.rootDomain}-web
      GenerateSecret: false
      UserPoolId:
        Ref: CognitoUserPool
      AccessTokenValidity: ${param:accessTokenValidityInMins}
      IdTokenValidity: ${param:idTokenValidityInMins}
      RefreshTokenValidity: ${param:refreshTokenValidityInMins}
      ExplicitAuthFlows:
        - ALLOW_REFRESH_TOKEN_AUTH
        - ALLOW_CUSTOM_AUTH
        - ALLOW_USER_PASSWORD_AUTH
      AllowedOAuthFlowsUserPoolClient: true
      AllowedOAuthFlows: [code]
      AllowedOAuthScopes: [openid, aws.cognito.signin.user.admin]
      CallbackURLs: [http://localhost:8080/]
      LogoutURLs: [http://localhost:8080/]
      SupportedIdentityProviders: [Google]
      TokenValidityUnits:
        AccessToken: minutes
        IdToken: minutes
        RefreshToken: minutes

  CognitoUserPoolIdentityProvider:
    Type: AWS::Cognito::UserPoolIdentityProvider
    Properties:
      ProviderName: Google
      AttributeMapping:
        email: email
        given_name: given_name
      ProviderDetails:
        client_id: ${env:GOOGLE_APP_ID}
        client_secret: ${env:GOOGLE_APP_SECRET}
        authorize_scopes: email openid profile
      ProviderType: Google
      UserPoolId:
        Ref: CognitoUserPool

Outputs:
  UserPoolId:
    Value: !Ref CognitoUserPool
  UserPoolClientId:
    Value: !Ref CognitoUserPoolClient
