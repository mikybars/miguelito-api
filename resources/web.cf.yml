Resources:
  RedirectBucket:
    Type: AWS::S3::Bucket
    Properties:
      BucketName: ${param:redirectBucketName}
      PublicAccessBlockConfiguration:
        BlockPublicAcls: false
        IgnorePublicAcls: false
        BlockPublicPolicy: false
        RestrictPublicBuckets: false
      OwnershipControls:
        Rules:
          - ObjectOwnership: ObjectWriter
      WebsiteConfiguration:
        IndexDocument: index.html

  AppBucket:
    Type: AWS::S3::Bucket
    Condition: IsPro
    Properties:
      BucketName: '${self:custom.rootDomain}-web'

  CloudFrontOriginAccessControl:
    Type: AWS::CloudFront::OriginAccessControl
    Properties:
      OriginAccessControlConfig:
        Name: !Ref AWS::StackName
        OriginAccessControlOriginType: s3
        SigningBehavior: always
        SigningProtocol: sigv4

  CloudFrontDistribution:
    Type: AWS::CloudFront::Distribution
    Condition: IsPro
    Properties:
      DistributionConfig:
        Enabled: true
        Origins:
          - Id: RedirectBucketOrigin
            DomainName:
              !Select [1, !Split ['://', !GetAtt RedirectBucket.WebsiteURL]]
            # S3 origin won't cut it for the redirect bucket as CloudFront doesn't follow redirects
            # https://docs.aws.amazon.com/AmazonCloudFront/latest/DeveloperGuide/http-3xx-status-codes.html
            CustomOriginConfig:
              OriginProtocolPolicy: http-only
          - Id: AppBucketOrigin
            DomainName: !GetAtt AppBucket.DomainName
            OriginPath: /dist
            S3OriginConfig:
              OriginAccessIdentity: ''
            OriginAccessControlId: !GetAtt CloudFrontOriginAccessControl.Id
        CustomErrorResponses:
          - ErrorCode: 404
            ResponsePagePath: '/404.html'
            ResponseCode: 200
            ErrorCachingMinTTL: 30
        Aliases:
          - ${self:custom.rootDomain}
        DefaultRootObject: index.html
        ViewerCertificate:
          AcmCertificateArn: ${self:custom.certificateArn}
          SslSupportMethod: sni-only
          MinimumProtocolVersion: 'TLSv1.2_2021'
        HttpVersion: 'http2'
        CacheBehaviors:
          - &defaultSettings
            PathPattern: '*.css'
            TargetOriginId: AppBucketOrigin
            # Caching Optimized
            CachePolicyId: 658327ea-f89d-4fab-a63d-7e88639e58f6
            Compress: true
            ViewerProtocolPolicy: 'redirect-to-https'
          - PathPattern: '*.js'
            <<: *defaultSettings
          - PathPattern: '*.js.map'
            <<: *defaultSettings
          - PathPattern: '*.css.map'
            <<: *defaultSettings
          - PathPattern: '*.html'
            # Caching Optimized for uncompressed objects
            CachePolicyId: b2884449-e4de-46a7-ac36-70bc7f1ddd6d
            Compress: false
            <<: *defaultSettings
        DefaultCacheBehavior:
          TargetOriginId: RedirectBucketOrigin
          # Caching disabled (AWS managed cache policy)
          CachePolicyId: 4135ea2d-6df8-44a3-9df3-4b5a84be39ad
          ViewerProtocolPolicy: 'redirect-to-https'

  RootDomainDNSRecord:
    Type: AWS::Route53::RecordSet
    Condition: IsPro
    Properties:
      AliasTarget:
        # https://docs.aws.amazon.com/es_es/AWSCloudFormation/latest/UserGuide/aws-properties-route53-aliastarget.html#cfn-route53-aliastarget-hostedzoneid
        HostedZoneId: Z2FDTNDATAQYW2
        DNSName: !GetAtt CloudFrontDistribution.DomainName
        EvaluateTargetHealth: false
      HostedZoneName: ${self:custom.rootDomain}.
      Name: ${self:custom.rootDomain}
      Type: A

  AppBucketPolicy:
    Type: AWS::S3::BucketPolicy
    Condition: IsPro
    Properties:
      Bucket: !Ref AppBucket
      PolicyDocument:
        Statement:
        - Action: s3:GetObject
          Effect: Allow
          Resource: !Sub ${AppBucket.Arn}/*
          Principal:
            Service: cloudfront.amazonaws.com
          Condition:
            StringEquals:
              AWS:SourceArn: !Sub arn:aws:cloudfront::${aws:accountId}:distribution/${CloudFrontDistribution}
