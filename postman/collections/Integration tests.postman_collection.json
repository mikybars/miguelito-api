{
	"info": {
		"_postman_id": "4348abd6-1896-48bf-b73d-cd170ca82dd8",
		"name": "Integration tests",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "9513392"
	},
	"item": [
		{
			"name": "AWS auth",
			"item": [
				{
					"name": "Create user",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"if (!pm.variables.has(\"userNo\")) {",
									"    console.log(\"** AWS AUTH BEGIN **\")",
									"    pm.variables.set(\"userNo\", 0)",
									"}",
									"",
									"const userNo = pm.variables.get(\"userNo\")",
									"test.postman(pm)",
									"test.user(userNo).setActive()"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"if (pm.response.code === 200) {",
									"    pm.test(`User ${pm.variables.get(\"testEmail\")} created`, function() {})",
									"}",
									"",
									"if (pm.response.code === 400) {",
									"    pm.test(`User ${pm.variables.get(\"testEmail\")} already exists`, function() {",
									"        postman.setNextRequest(null)",
									"        pm.expect(pm.response.json()).to.have.property('__type', 'UsernameExistsException');",
									"        postman.setNextRequest()",
									"    });",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "X-Amz-Target",
								"value": "AWSCognitoIdentityProviderService.AdminCreateUser",
								"type": "text"
							},
							{
								"key": "Content-Type",
								"value": "application/x-amz-json-1.1",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"TemporaryPassword\": \"{{testPassword}}\",\n    \"MessageAction\": \"SUPPRESS\",\n    \"UserAttributes\": [\n        { \n            \"Name\": \"email\",\n            \"Value\": \"{{testEmail}}\"\n        },\n        { \n            \"Name\": \"given_name\",\n            \"Value\": \"{{testEmail}}\"\n        }\n    ],\n    \"Username\": \"{{testUser}}\",\n    \"UserPoolId\": \"{{cognitoUserPoolId}}\"\n}\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "https://cognito-idp.{{awsRegion}}.amazonaws.com/",
							"protocol": "https",
							"host": [
								"cognito-idp",
								"{{awsRegion}}",
								"amazonaws",
								"com"
							],
							"path": [
								""
							]
						}
					},
					"response": []
				},
				{
					"name": "Initiate auth",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"test.postman(pm)",
									"const jsonData = pm.response.json()",
									"const userNo = pm.variables.get(\"userNo\")",
									"const user = test.user(userNo)",
									"",
									"pm.test(`Status code is 200`, function() {",
									"    postman.setNextRequest(null)",
									"    pm.response.to.have.status(200);",
									"    postman.setNextRequest()",
									"});",
									"",
									"if (jsonData.ChallengeName) {",
									"    pm.test(\"Auth challenge response required\", function() {",
									"        postman.setNextRequest(null)",
									"        pm.expect(jsonData).to.have.property(\"ChallengeName\", \"NEW_PASSWORD_REQUIRED\")",
									"        pm.expect(jsonData).to.have.property(\"Session\")",
									"        pm.variables.set(\"awsAuthSession\", jsonData.Session)",
									"        postman.setNextRequest()",
									"    })",
									"} else {",
									"    pm.test(`User ${user.email} logged in`, function() {",
									"        postman.setNextRequest(null)",
									"        pm.expect(jsonData).to.deep.nested.property('AuthenticationResult.IdToken')",
									"        user.setIdToken(jsonData.AuthenticationResult.IdToken)",
									"        postman.setNextRequest()",
									"    })",
									"}",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "X-Amz-Target",
								"value": "AWSCognitoIdentityProviderService.InitiateAuth",
								"type": "text"
							},
							{
								"key": "Content-Type",
								"value": "application/x-amz-json-1.1",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"AuthFlow\": \"USER_PASSWORD_AUTH\",\n    \"ClientId\": \"{{cognitoClientId}}\",\n    \"AuthParameters\": {\n        \"USERNAME\": \"{{testUser}}\",\n        \"PASSWORD\": \"{{testPassword}}\"\n    }\n}\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "https://cognito-idp.{{awsRegion}}.amazonaws.com/",
							"protocol": "https",
							"host": [
								"cognito-idp",
								"{{awsRegion}}",
								"amazonaws",
								"com"
							],
							"path": [
								""
							]
						}
					},
					"response": []
				},
				{
					"name": "Respond to auth challenge",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"test.postman(pm)",
									"if (!pm.variables.has(\"awsAuthSession\")) {",
									"    test.skipCurrentRequest()",
									"}"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"test.postman(pm)",
									"const jsonData = pm.response.json()",
									"const userNo = pm.variables.get(\"userNo\")",
									"const user = test.user(userNo)",
									"const authChallengeWasRequired = pm.variables.has(\"awsAuthSession\")",
									"",
									"test.runIf(authChallengeWasRequired, `User ${user.email} logged in`, function() {",
									"    postman.setNextRequest(null)",
									"    pm.response.to.have.status(200);",
									"    pm.expect(jsonData).to.deep.nested.property('AuthenticationResult.IdToken')",
									"    user.setIdToken(jsonData.AuthenticationResult.IdToken)",
									"    postman.setNextRequest()",
									"});",
									"",
									"if (test.user(userNo + 1) !== undefined) {",
									"   pm.variables.set(\"userNo\", userNo + 1)",
									"   pm.variables.unset(\"awsAuthSession\")",
									"   postman.setNextRequest(\"Create user\")",
									"} else {",
									"    pm.variables.unset(\"userNo\")",
									"    console.log(\"** AWS AUTH END **\")",
									"}",
									"",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "X-Amz-Target",
								"value": "AWSCognitoIdentityProviderService.RespondToAuthChallenge",
								"type": "text"
							},
							{
								"key": "Content-Type",
								"value": "application/x-amz-json-1.1",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"ClientId\": \"{{cognitoClientId}}\",\n    \"ChallengeName\": \"NEW_PASSWORD_REQUIRED\",\n    \"Session\": \"{{awsAuthSession}}\",\n    \"ChallengeResponses\": {\n        \"USERNAME\": \"{{testUser}}\",\n        \"NEW_PASSWORD\": \"{{testPassword}}\"\n    }\n}\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "https://cognito-idp.{{awsRegion}}.amazonaws.com/",
							"protocol": "https",
							"host": [
								"cognito-idp",
								"{{awsRegion}}",
								"amazonaws",
								"com"
							],
							"path": [
								""
							]
						}
					},
					"response": []
				}
			],
			"auth": {
				"type": "awsv4",
				"awsv4": [
					{
						"key": "secretKey",
						"value": "{{secretAccessKey}}",
						"type": "string"
					},
					{
						"key": "accessKey",
						"value": "{{accessKey}}",
						"type": "string"
					},
					{
						"key": "service",
						"value": "cognito-idp",
						"type": "string"
					},
					{
						"key": "region",
						"value": "{{awsRegion}}",
						"type": "string"
					}
				]
			},
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				}
			]
		},
		{
			"name": "an activated user",
			"item": [
				{
					"name": "when creating a custom link",
					"item": [
						{
							"name": "starting with no data",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"console.log(\"Clearing all data\")"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/admin/links",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"admin",
										"links"
									]
								}
							},
							"response": []
						},
						{
							"name": "should succeed if the input data is valid",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"test.postman(pm)",
											"",
											"pm.test(\"Status code is 201\", function() {",
											"    pm.response.to.have.status(201);",
											"});",
											"",
											"pm.test(\"Response is a valid link\", function() {",
											"    const response = pm.response.json();",
											"    const requestData = JSON.parse(request.data);",
											"    test.assertValidCustomLink(response, {",
											"        origin: requestData.origin,",
											"        backhalf: requestData.backhalf,",
											"        user: test.user(0).email",
											"    });",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"origin\": \"https://www.google.com\",\n    \"backhalf\": \"test-link-HMGeUdkrz2\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/links",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"links"
									]
								}
							},
							"response": []
						},
						{
							"name": "should fail if the URL is invalid",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"test.postman(pm)",
											"",
											"pm.test(\"Status code is 400\", function() {",
											"    pm.response.to.have.status(400);",
											"});",
											"",
											"pm.test(\"Response is an error\", function() {",
											"    test.assertValidErrorResponse(/url is invalid/i);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"origin\": \"this is not an URL\",\n    \"backhalf\": \"test-link-HMGeUdkrz2\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/links",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"links"
									]
								}
							},
							"response": []
						},
						{
							"name": "should fail if the backhalf is invalid",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"test.postman(pm)",
											"",
											"pm.test(\"Status code is 400\", function() {",
											"    pm.response.to.have.status(400);",
											"});",
											"",
											"pm.test(\"Response is an error\", function() {",
											"    test.assertValidErrorResponse(/does not match/i);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"origin\": \"https://www.google.com\",\n    \"backhalf\": \"invalid ch*rcter$\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/links",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"links"
									]
								}
							},
							"response": []
						},
						{
							"name": "should fail if the backhalf is empty",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"test.postman(pm)",
											"",
											"pm.test(\"Status code is 400\", function() {",
											"    pm.response.to.have.status(400);",
											"});",
											"",
											"pm.test(\"Response is an error\", function() {",
											"    test.assertValidErrorResponse(/length invalid/i);",
											"    test.assertValidErrorResponse(/range/i);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"origin\": \"https://www.google.com\",\n    \"backhalf\": \"\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/links",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"links"
									]
								}
							},
							"response": []
						},
						{
							"name": "should fail if the backhalf is too long",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"test.postman(pm)",
											"",
											"pm.test(\"Status code is 400\", function() {",
											"    pm.response.to.have.status(400);",
											"});",
											"",
											"pm.test(\"Response is an error\", function() {",
											"    test.assertValidErrorResponse(/length invalid/i);",
											"    test.assertValidErrorResponse(/range/i);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"origin\": \"https://www.google.com\",\n    \"backhalf\": \"this-is-a-very-long-and-winding-link\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/links",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"links"
									]
								}
							},
							"response": []
						},
						{
							"name": "should fail if the link already exists",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"test.postman(pm)",
											"test.before()",
											"test.user(1).createLink('https://www.bing.com')"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"test.postman(pm)",
											"",
											"pm.test(\"Status code is 400\", function() {",
											"    pm.response.to.have.status(400);",
											"});",
											"",
											"pm.test(\"Response is an error\", function() {",
											"    test.assertValidErrorResponse(/already taken/i);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"origin\": \"https://www.google.com\",\n    \"backhalf\": \"{{createdLink}}\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/links",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"links"
									]
								}
							},
							"response": []
						}
					],
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						}
					]
				},
				{
					"name": "when listing links",
					"item": [
						{
							"name": "starting with no data",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"console.log(\"Clearing all data\")"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/admin/links",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"admin",
										"links"
									]
								}
							},
							"response": []
						},
						{
							"name": "should see only her links",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"test.postman(pm)",
											"test.before()",
											"test.user(0).createLink('https://www.google.com', 'test-link-HMGeUdkrz2')",
											"test.user(1).createLink('https://www.bing.com', 'test-link-JMG0Uskrz3')"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"test.postman(pm)",
											"",
											"pm.test(\"Status code is 200\", function() {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Response is a list of links\", function() {",
											"    const response = pm.response.json();",
											"    const user = pm.variables.get('testEmail');",
											"    pm.expect(response)",
											"        .to.be.an('object')",
											"        .and.to.have.property('data')",
											"            .to.be.an('array')",
											"            .and.to.be.length(1);",
											"    test.assertValidCustomLink(response.data[0], {",
											"        origin: 'https://www.google.com',",
											"        backhalf: 'test-link-HMGeUdkrz2',",
											"        user: user",
											"    },",
											"    pm);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/links",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"links"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "when deleting a link",
					"item": [
						{
							"name": "starting with no data",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"console.log(\"Clearing all data\")"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/admin/links",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"admin",
										"links"
									]
								}
							},
							"response": []
						},
						{
							"name": "should succeed  if the link is owned by the user",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"test.postman(pm)",
											"test.before()",
											"test.user(0).createLink('https://wwww.google.com', 'test-link-HMGeUdkrz2')"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 204\", function() {",
											"    pm.response.to.have.status(204);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/links/:backhalf",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"links",
										":backhalf"
									],
									"variable": [
										{
											"key": "backhalf",
											"value": "test-link-HMGeUdkrz2"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "should fail if the link does not exist",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"test.postman(pm)",
											"",
											"pm.test(\"Status code is 403\", function() {",
											"    pm.response.to.have.status(403);",
											"});",
											"",
											"pm.test(\"Response is an error\", function() {",
											"    test.assertValidErrorResponse(/not allowed/i);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/links/:backhalf",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"links",
										":backhalf"
									],
									"variable": [
										{
											"key": "backhalf",
											"value": "OIUIOUI-LJOJOJHHO-3434KL"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "should fail if the link is not owned by the user",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"test.postman(pm)",
											"test.before()",
											"test.user(1).createLink('https://wwww.google.com')"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"test.postman(pm)",
											"",
											"pm.test(\"Status code is 403\", function() {",
											"    pm.response.to.have.status(403);",
											"});",
											"",
											"pm.test(\"Response is an error\", function() {",
											"    test.assertValidErrorResponse(/not allowed to delete/i);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/links/:backhalf",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"links",
										":backhalf"
									],
									"variable": [
										{
											"key": "backhalf",
											"value": "{{createdLink}}"
										}
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "when updating a link",
					"item": [
						{
							"name": "starting with no data",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"console.log(\"Clearing all data\")"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/admin/links",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"admin",
										"links"
									]
								}
							},
							"response": []
						},
						{
							"name": "should succeed if the link is owned by the user and the new backhalf is valid",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"test.postman(pm)",
											"test.user(0).createLink('https://www.google.com', 'test-link-HMGeUdkrz2')"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"test.postman(pm)",
											"",
											"pm.test(\"Status code is 200\", function() {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Response is a valid link\", function() {",
											"    const requestData = JSON.parse(request.data);",
											"    test.assertValidUpdatedLinkInResponse({",
											"        origin: 'https://www.google.com',",
											"        backhalf: requestData.backhalf,",
											"        user: test.user(0).email",
											"    });",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PATCH",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"backhalf\": \"test-link-Z6uxw8Q5uk\"\n}"
								},
								"url": {
									"raw": "{{baseUrl}}/links/:backhalf",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"links",
										":backhalf"
									],
									"variable": [
										{
											"key": "backhalf",
											"value": "test-link-HMGeUdkrz2"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "should succeed if the link is owned by the user and the new URL is valid",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"test.postman(pm)",
											"test.user(0).createLink('https://www.google.com', 'test-link-HMGeUdkrz2')"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"test.postman(pm)",
											"",
											"pm.test(\"Status code is 200\", function() {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Response is a valid link\", function() {",
											"    const requestData = JSON.parse(request.data);",
											"    test.assertValidUpdatedLinkInResponse({",
											"        origin: requestData.origin,",
											"        backhalf: 'test-link-HMGeUdkrz2',",
											"        user: test.user(0).email",
											"    });",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PATCH",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"origin\": \"https://www.bing.com\"\n}"
								},
								"url": {
									"raw": "{{baseUrl}}/links/:backhalf",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"links",
										":backhalf"
									],
									"variable": [
										{
											"key": "backhalf",
											"value": "test-link-HMGeUdkrz2"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "should fail if the link is owned by the user but the URL is invalid",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"test.postman(pm)",
											"test.user(0).createLink('https://www.google.com', 'test-link-HMGeUdkrz2')"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"test.postman(pm)",
											"",
											"pm.test(\"Status code is 400\", function() {",
											"    pm.response.to.have.status(400);",
											"});",
											"",
											"pm.test(\"Response is an error\", function() {",
											"    test.assertValidErrorResponse(/is invalid/i);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PATCH",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"origin\": \"www.bing.com\"\n}"
								},
								"url": {
									"raw": "{{baseUrl}}/links/:backhalf",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"links",
										":backhalf"
									],
									"variable": [
										{
											"key": "backhalf",
											"value": "test-link-HMGeUdkrz2"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "should fail if the link is owned by the user but the backhalf is invalid",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"test.postman(pm)",
											"test.user(0).createLink('https://www.google.com', 'test-link-HMGeUdkrz2')"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"test.postman(pm)",
											"",
											"pm.test(\"Status code is 400\", function() {",
											"    pm.response.to.have.status(400);",
											"});",
											"",
											"pm.test(\"Response is an error\", function() {",
											"    test.assertValidErrorResponse(/does not match/i);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PATCH",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"backhalf\": \"invalid chr*ter$\"\n}"
								},
								"url": {
									"raw": "{{baseUrl}}/links/:backhalf",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"links",
										":backhalf"
									],
									"variable": [
										{
											"key": "backhalf",
											"value": "test-link-HMGeUdkrz2"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "should fail if the link does not exist",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"test.postman(pm)",
											"",
											"pm.test(\"Status code is 403\", function() {",
											"    pm.response.to.have.status(403);",
											"});",
											"",
											"pm.test(\"Response is an error\", function() {",
											"    test.assertValidErrorResponse(/not allowed/i);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PATCH",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"origin\": \"https://www.nevermind.com/\"\n}"
								},
								"url": {
									"raw": "{{baseUrl}}/links/:backhalf",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"links",
										":backhalf"
									],
									"variable": [
										{
											"key": "backhalf",
											"value": "OIUOIUIOU-LKJLKFHTH-3434"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "should fail if the link is owned by another user",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"test.postman(pm)",
											"test.user(1).createLink('https://www.google.com')"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"test.postman(pm)",
											"",
											"pm.test(\"Status code is 403\", function() {",
											"    pm.response.to.have.status(403);",
											"});",
											"",
											"pm.test(\"Response is an error\", function() {",
											"    test.assertValidErrorResponse(/not allowed to update/i);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PATCH",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"origin\": \"https://www.bing.com\",\n    \"backhalf\": \"test-link-Z6uxw8Q5uk\"\n}"
								},
								"url": {
									"raw": "{{baseUrl}}/links/:backhalf",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"links",
										":backhalf"
									],
									"variable": [
										{
											"key": "backhalf",
											"value": "{{createdLink}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "should fail if the new backhalf is already taken",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"test.postman(pm)",
											"test.user(0).createLink('https://www.google.com', 'google-HMGeUdkrz2')",
											"test.user(1).createLink('https://www.google.com', 'taken')"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"test.postman(pm)",
											"",
											"pm.test(\"Status code is 400\", function() {",
											"    pm.response.to.have.status(400);",
											"});",
											"",
											"pm.test(\"Response is an error\", function() {",
											"    test.assertValidErrorResponse(/already taken/i);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PATCH",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"backhalf\": \"taken\"\n}"
								},
								"url": {
									"raw": "{{baseUrl}}/links/:backhalf",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"links",
										":backhalf"
									],
									"variable": [
										{
											"key": "backhalf",
											"value": "google-HMGeUdkrz2"
										}
									]
								}
							},
							"response": []
						}
					]
				}
			],
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"type": "text/javascript",
						"exec": [
							"test.postman(pm)",
							"test.user(0).setActive()"
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				}
			]
		},
		{
			"name": "a non activated user",
			"item": [
				{
					"name": "should not be able to delete a link",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"test.postman(pm)",
									"",
									"pm.test(\"Status code is 403\", function() {",
									"    pm.response.to.have.status(403);",
									"});",
									"",
									"pm.test(\"Response is an error\", function() {",
									"    test.assertValidErrorResponse(/user account not activated/i);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/links/:backhalf",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"links",
								":backhalf"
							],
							"variable": [
								{
									"key": "backhalf",
									"value": "test-link-HMGeUdkrz2"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "should not be able to list links",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"test.postman(pm)",
									"",
									"pm.test(\"Status code is 403\", function() {",
									"    pm.response.to.have.status(403);",
									"});",
									"",
									"pm.test(\"Response is an error\", function() {",
									"    test.assertValidErrorResponse(/user account not activated/i);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/links",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"links"
							]
						}
					},
					"response": []
				},
				{
					"name": "should not be able to create links",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"test.postman(pm)",
									"",
									"pm.test(\"Status code is 403\", function() {",
									"    pm.response.to.have.status(403);",
									"});",
									"",
									"pm.test(\"Response is an error\", function() {",
									"    test.assertValidErrorResponse(/user account not activated/i);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"origin\": \"https://www.google.com\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/links",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"links"
							]
						}
					},
					"response": []
				},
				{
					"name": "should not be able to update a link",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"test.postman(pm)",
									"",
									"pm.test(\"Status code is 403\", function() {",
									"    pm.response.to.have.status(403);",
									"});",
									"",
									"pm.test(\"Response is an error\", function() {",
									"    test.assertValidErrorResponse(/user account not activated/i);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PATCH",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"backhalf\": \"test-link-Z6uxw8Q5uk\"\n}"
						},
						"url": {
							"raw": "{{baseUrl}}/links/:backhalf",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"links",
								":backhalf"
							],
							"variable": [
								{
									"key": "backhalf",
									"value": "test-link-HMGeUdkrz2"
								}
							]
						}
					},
					"response": []
				}
			],
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"type": "text/javascript",
						"exec": [
							"test.postman(pm)",
							"test.before()",
							"test.user(2).setActive()"
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				}
			]
		},
		{
			"name": "AWS auth",
			"item": [
				{
					"name": "Delete user",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"if (!pm.variables.has(\"userNo\")) {",
									"    console.log(\"** AWS AUTH BEGIN **\")",
									"    pm.variables.set(\"userNo\", 0)",
									"}",
									"",
									"const userNo = pm.variables.get(\"userNo\")",
									"test.postman(pm)",
									"test.user(userNo).setActive()"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"test.postman(pm)",
									"",
									"if (pm.response.code === 200) {",
									"  console.log(`Test user ${pm.variables.get(\"testEmail\")} deleted`)",
									"}",
									"",
									"const userNo = pm.variables.get(\"userNo\")",
									"if (test.user(userNo + 1) !== undefined) {",
									"   pm.variables.set(\"userNo\", userNo + 1)",
									"   postman.setNextRequest(\"Delete user\")",
									"} else {",
									"    console.log(\"** AWS AUTH END **\")",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "X-Amz-Target",
								"value": "AWSCognitoIdentityProviderService.AdminDeleteUser",
								"type": "text"
							},
							{
								"key": "Content-Type",
								"value": "application/x-amz-json-1.1",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"Username\": \"{{testUser}}\",\n    \"UserPoolId\": \"{{cognitoUserPoolId}}\"\n}\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "https://cognito-idp.{{awsRegion}}.amazonaws.com/",
							"protocol": "https",
							"host": [
								"cognito-idp",
								"{{awsRegion}}",
								"amazonaws",
								"com"
							],
							"path": [
								""
							]
						}
					},
					"response": []
				}
			],
			"auth": {
				"type": "awsv4",
				"awsv4": [
					{
						"key": "service",
						"value": "cognito-idp",
						"type": "string"
					},
					{
						"key": "region",
						"value": "{{awsRegion}}",
						"type": "string"
					},
					{
						"key": "secretKey",
						"value": "{{secretAccessKey}}",
						"type": "string"
					},
					{
						"key": "accessKey",
						"value": "{{accessKey}}",
						"type": "string"
					}
				]
			},
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				}
			]
		}
	],
	"auth": {
		"type": "bearer",
		"bearer": [
			{
				"key": "token",
				"value": "{{idToken}}",
				"type": "string"
			}
		]
	},
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"exec": [
					"const mandatoryFields = ['url', 'origin', 'backhalf', 'created_at'];",
					"",
					"function createLink(user, origin, backhalf) {",
					"    if (!backhalf) {",
					"        console.log(`Creating custom link '${backhalf}' pointing to '${origin}'`);",
					"    } else {",
					"            console.log(`Creating link pointing to '${origin}'`);",
					"    }",
					"    pm.sendRequest({",
					"        url: pm.environment.get('baseUrl') + '/links',",
					"        method: 'POST',",
					"        header: {",
					"            'content-type': 'application/json',",
					"            'authorization': 'Bearer ' + user.getIdToken()",
					"        },",
					"        ...JSONBody({origin, backhalf}),",
					"    }, function(err, res) {",
					"        handleRes(err, res);",
					"        if (res.code === 201) {",
					"            const backhalf = res.json().backhalf;",
					"            console.log(`User ${user.email} created link ${backhalf}`);",
					"            pm.variables.set('createdLink', backhalf);",
					"        }",
					"    });",
					"}",
					"",
					"test = {",
					"      postman(p) {",
					"        pm = p",
					"      },",
					"      user(n) {",
					"        const testUsers = JSON.parse(pm.variables.get(`testUsers`))",
					"        const testEmails = JSON.parse(pm.variables.get(`testEmails`))",
					"        if (n >= testUsers.length) {",
					"            return;",
					"        }",
					"        return {",
					"            name: testUsers[n],",
					"            email: testEmails[n],",
					"            setIdToken(token) {",
					"                pm.variables.set(`idToken${n}`, token)",
					"            },",
					"            getIdToken() {",
					"                return pm.variables.get(`idToken${n}`)",
					"            },",
					"            setActive() {",
					"                pm.variables.set(\"idToken\", pm.variables.get(`idToken${n}`))",
					"                pm.variables.set(\"testUser\", testUsers[n])",
					"                pm.variables.set(\"testEmail\", testEmails[n])",
					"            },",
					"            createLink(origin, backhalf) {",
					"              createLink(this, origin, backhalf)  ",
					"            },",
					"        }",
					"    },",
					"    before() {",
					"        console.log(`** before ** ${request.name}`)",
					"    },",
					"    after() {",
					"        console.log(`** after ** ${request.name}`)",
					"    },",
					"    runIf(condition, testName, testFn) {",
					"        (condition ? pm.test : pm.test.skip)(testName, testFn)",
					"    },",
					"    skipCurrentRequest() {",
					"        console.log(`Skipped '${request.name}'`)",
					"        pm.request.url = \"postman-echo.com/get\"",
					"        pm.request.method = \"get\"",
					"    },",
					"    assertValidCustomLink(object, expected) {",
					"        pm.expect(object)",
					"            .to.be.an('object')",
					"            .and.to.have.keys(mandatoryFields.concat('user'));",
					"        pm.expect(object).to.have.property('origin', expected.origin);",
					"        pm.expect(object).to.have.property('backhalf', expected.backhalf);",
					"        pm.expect(object).to.have.property('user', expected.user);",
					"    },",
					"    assertValidUpdatedLinkInResponse(expected) {",
					"        const response = pm.response.json();",
					"        pm.expect(response)",
					"            .to.be.an('object')",
					"            .and.to.have.keys(mandatoryFields.concat('user', 'updated_at'));",
					"        pm.expect(response).to.have.property('origin', expected.origin);",
					"        pm.expect(response).to.have.property('backhalf', expected.backhalf);",
					"        pm.expect(response).to.have.property('user', expected.user);",
					"    }, ",
					"    assertValidErrorResponse(message) {",
					"        const response = pm.response.json();",
					"        pm.expect(response)",
					"            .to.be.an('object')",
					"            .and.to.have.property('message')",
					"                .to.match(message);",
					"    }",
					"}",
					"",
					"function JSONBody(data) {",
					"    return {",
					"        body: {",
					"            mode: 'raw',",
					"            raw: JSON.stringify(data),",
					"        }",
					"    }",
					"}",
					"",
					"function handleRes(err, res) {",
					"  if (err) {",
					"      console.error(err);",
					"  } else if (![200, 201, 204].includes(res.code)) {",
					"      console.error(res.json().message);",
					"  }",
					"}"
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		}
	],
	"variable": [
		{
			"key": "testUsers",
			"value": "[\"testuser1\", \"testuser2\", \"testuser3\"]"
		},
		{
			"key": "testEmails",
			"value": "[\"test1@dev.migueli.to\", \"test2@dev.migueli.to\", \"test@gmail.com\"]"
		},
		{
			"key": "testPassword",
			"value": "yourPa$sword12345"
		}
	]
}