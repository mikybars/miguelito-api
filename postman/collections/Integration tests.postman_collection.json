{
	"info": {
		"_postman_id": "c8e8d81d-6127-4d5f-b701-99184878f9f3",
		"name": "Integration tests",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "30338584"
	},
	"item": [
		{
			"name": "set up",
			"item": [
				{
					"name": "AWS auth",
					"item": [
						{
							"name": "Create user",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"if (!pm.variables.has(\"userNo\")) {",
											"    console.log(\"** AWS AUTH BEGIN **\")",
											"    pm.variables.set(\"userNo\", 0)",
											"}",
											"",
											"const userNo = pm.variables.get(\"userNo\")",
											"test.use(pm).user(userNo).setAsCurrent()"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"if (pm.response.code === 200) {",
											"    pm.test(`User ${pm.variables.get(\"testEmail\")} created`, function() {})",
											"}",
											"",
											"if (pm.response.code === 400) {",
											"    pm.test(`User ${pm.variables.get(\"testEmail\")} already exists`, function() {",
											"        postman.setNextRequest(null)",
											"        pm.expect(pm.response.json()).to.have.property('__type', 'UsernameExistsException');",
											"        postman.setNextRequest()",
											"    });",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "X-Amz-Target",
										"value": "AWSCognitoIdentityProviderService.AdminCreateUser",
										"type": "text"
									},
									{
										"key": "Content-Type",
										"value": "application/x-amz-json-1.1",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"TemporaryPassword\": \"{{testPassword}}\",\n    \"MessageAction\": \"SUPPRESS\",\n    \"UserAttributes\": [\n        { \n            \"Name\": \"email\",\n            \"Value\": \"{{testEmail}}\"\n        },\n        { \n            \"Name\": \"given_name\",\n            \"Value\": \"{{testEmail}}\"\n        }\n    ],\n    \"Username\": \"{{testUser}}\",\n    \"UserPoolId\": \"{{cognitoUserPoolId}}\"\n}\n",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "https://cognito-idp.{{awsRegion}}.amazonaws.com/",
									"protocol": "https",
									"host": [
										"cognito-idp",
										"{{awsRegion}}",
										"amazonaws",
										"com"
									],
									"path": [
										""
									]
								}
							},
							"response": []
						},
						{
							"name": "Initiate auth",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const jsonData = pm.response.json()",
											"const userNo = pm.variables.get(\"userNo\")",
											"const user = test.use(pm).user(userNo)",
											"",
											"pm.test(`Status code is 200`, function() {",
											"    postman.setNextRequest(null)",
											"    pm.response.to.have.status(200);",
											"    postman.setNextRequest()",
											"});",
											"",
											"if (jsonData.ChallengeName) {",
											"    pm.test(\"Auth challenge response required\", function() {",
											"        postman.setNextRequest(null)",
											"        pm.expect(jsonData).to.have.property(\"ChallengeName\", \"NEW_PASSWORD_REQUIRED\")",
											"        pm.expect(jsonData).to.have.property(\"Session\")",
											"        pm.variables.set(\"awsAuthSession\", jsonData.Session)",
											"        postman.setNextRequest()",
											"    })",
											"} else {",
											"    pm.test(`User ${user.email} logged in`, function() {",
											"        postman.setNextRequest(null)",
											"        pm.expect(jsonData).to.deep.nested.property('AuthenticationResult.IdToken')",
											"        user.setIdToken(jsonData.AuthenticationResult.IdToken)",
											"        postman.setNextRequest()",
											"    })",
											"}",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "X-Amz-Target",
										"value": "AWSCognitoIdentityProviderService.InitiateAuth",
										"type": "text"
									},
									{
										"key": "Content-Type",
										"value": "application/x-amz-json-1.1",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"AuthFlow\": \"USER_PASSWORD_AUTH\",\n    \"ClientId\": \"{{cognitoClientId}}\",\n    \"AuthParameters\": {\n        \"USERNAME\": \"{{testUser}}\",\n        \"PASSWORD\": \"{{testPassword}}\"\n    }\n}\n",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "https://cognito-idp.{{awsRegion}}.amazonaws.com/",
									"protocol": "https",
									"host": [
										"cognito-idp",
										"{{awsRegion}}",
										"amazonaws",
										"com"
									],
									"path": [
										""
									]
								}
							},
							"response": []
						},
						{
							"name": "Respond to auth challenge",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"if (!pm.variables.has(\"awsAuthSession\")) {",
											"    test.use(pm).skipCurrentRequest()",
											"}"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"const jsonData = pm.response.json()",
											"const userNo = pm.variables.get(\"userNo\")",
											"const user = test.use(pm).user(userNo)",
											"const authChallengeWasRequired = pm.variables.has(\"awsAuthSession\")",
											"",
											"test.runIf(authChallengeWasRequired, `User ${user.email} logged in`, function() {",
											"    postman.setNextRequest(null)",
											"    pm.response.to.have.status(200);",
											"    pm.expect(jsonData).to.deep.nested.property('AuthenticationResult.IdToken')",
											"    user.setIdToken(jsonData.AuthenticationResult.IdToken)",
											"    postman.setNextRequest()",
											"});",
											"",
											"if (test.user(userNo + 1) !== undefined) {",
											"   pm.variables.set(\"userNo\", userNo + 1)",
											"   pm.variables.unset(\"awsAuthSession\")",
											"   postman.setNextRequest(\"Create user\")",
											"} else {",
											"    pm.variables.unset(\"userNo\")",
											"    console.log(\"** AWS AUTH END **\")",
											"}",
											"",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "X-Amz-Target",
										"value": "AWSCognitoIdentityProviderService.RespondToAuthChallenge",
										"type": "text"
									},
									{
										"key": "Content-Type",
										"value": "application/x-amz-json-1.1",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"ClientId\": \"{{cognitoClientId}}\",\n    \"ChallengeName\": \"NEW_PASSWORD_REQUIRED\",\n    \"Session\": \"{{awsAuthSession}}\",\n    \"ChallengeResponses\": {\n        \"USERNAME\": \"{{testUser}}\",\n        \"NEW_PASSWORD\": \"{{testPassword}}\"\n    }\n}\n",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "https://cognito-idp.{{awsRegion}}.amazonaws.com/",
									"protocol": "https",
									"host": [
										"cognito-idp",
										"{{awsRegion}}",
										"amazonaws",
										"com"
									],
									"path": [
										""
									]
								}
							},
							"response": []
						}
					],
					"auth": {
						"type": "awsv4",
						"awsv4": [
							{
								"key": "accessKey",
								"value": "{{awsAccessKeyId}}",
								"type": "string"
							},
							{
								"key": "secretKey",
								"value": "{{awsSecretAccessKey}}",
								"type": "string"
							},
							{
								"key": "service",
								"value": "cognito-idp",
								"type": "string"
							},
							{
								"key": "region",
								"value": "{{awsRegion}}",
								"type": "string"
							}
						]
					},
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						}
					]
				},
				{
					"name": "data",
					"item": [
						{
							"name": "Delete all links",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"console.log(\"Deleting all the links\")",
											"test.use(pm).user(0).setAsCurrent()"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response status is OK\", function () {",
											"    postman.setNextRequest(null);",
											"    pm.expect(pm.response.code).to.be.oneOf([200, 204])",
											"    postman.setNextRequest()",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/admin/links",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"admin",
										"links"
									]
								}
							},
							"response": []
						}
					]
				}
			]
		},
		{
			"name": "an activated user",
			"item": [
				{
					"name": "when listing links",
					"item": [
						{
							"name": "👍 see only her links",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const jsonResponse = pm.response.json();",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Response schema is valid\", function () {",
											"    const validate = ajv.getSchema(schema.links.$id);",
											"    pm.expect(validate(jsonResponse), utils.errorMsg(validate.errors)).to.be.true;",
											"});",
											"",
											"pm.test(\"Links returned are owned by auth user\", function () {",
											"    pm.expect(jsonResponse.data)",
											"        .to.be.an(\"array\")",
											"        .to.have.lengthOf(1)",
											"    pm.expect(jsonResponse.data[0]).to.have.property('user', test.currentUser().email);",
											"});",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"test.before()",
											"",
											"test.use(pm)",
											"test.currentUser().createLink('https://www.google.com', 'list-links-1')",
											"test.otherUser().createLink('https://www.bing.com', 'list-links-2')"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/links",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"links"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "when creating a custom link",
					"item": [
						{
							"name": "👍 valid input",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"const jsonResponse = pm.response.json()",
											"",
											"pm.test(\"Status code is 201\", function () {",
											"    pm.response.to.have.status(201);",
											"});",
											"",
											"pm.test(\"Response schema is valid\", function () {",
											"    const validate = ajv.getSchema(schema.link.$id);",
											"    pm.expect(validate(jsonResponse), utils.errorMsg(validate.errors)).to.be.true;",
											"});",
											"",
											"pm.test(\"Response matches request\", function () {",
											"    const jsonRequest = JSON.parse(request.data);",
											"    pm.expect(jsonResponse).to.have.property('origin', jsonRequest.origin);",
											"    pm.expect(jsonResponse).to.have.property('backhalf', jsonRequest.backhalf);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"origin\": \"https://www.google.com\",\n    \"backhalf\": \"create-link-1\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/links",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"links"
									]
								}
							},
							"response": []
						},
						{
							"name": "👎 URL invalid",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"const jsonResponse = pm.response.json()",
											"",
											"pm.test(\"Status code is 400\", function () {",
											"    pm.response.to.have.status(400);",
											"});",
											"",
											"pm.test(\"Error response schema is valid\", function () {",
											"    const validate = ajv.getSchema(schema.error.$id);",
											"    pm.expect(validate(jsonResponse), utils.errorMsg(validate.errors)).to.be.true;",
											"});",
											"",
											"pm.test(\"Error message describes problem\", function () {",
											"    pm.expect(test.errorMsg(jsonResponse)).to.match(/url is invalid/i);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"origin\": \"this is not an URL\",\n    \"backhalf\": \"create-link-2\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/links",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"links"
									]
								}
							},
							"response": []
						},
						{
							"name": "👎 backhalf invalid",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"const jsonResponse = pm.response.json()",
											"",
											"pm.test(\"Status code is 400\", function () {",
											"    pm.response.to.have.status(400);",
											"});",
											"",
											"pm.test(\"Error response schema is valid\", function () {",
											"    const validate = ajv.getSchema(schema.error.$id);",
											"    pm.expect(validate(jsonResponse), utils.errorMsg(validate.errors)).to.be.true;",
											"});",
											"",
											"pm.test(\"Error message describes problem\", function () {",
											"    pm.expect(test.errorMsg(jsonResponse)).to.match(/does not match/i);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"origin\": \"https://www.google.com\",\n    \"backhalf\": \"invalid ch*rcter$\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/links",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"links"
									]
								}
							},
							"response": []
						},
						{
							"name": "👎 backhalf empty",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"const jsonResponse = pm.response.json()",
											"",
											"pm.test(\"Status code is 400\", function () {",
											"    pm.response.to.have.status(400);",
											"});",
											"",
											"pm.test(\"Error response schema is valid\", function () {",
											"    const validate = ajv.getSchema(schema.error.$id);",
											"    pm.expect(validate(jsonResponse), utils.errorMsg(validate.errors)).to.be.true;",
											"});",
											"",
											"pm.test(\"Error message describes problem\", function () {",
											"    pm.expect(test.errorMsg(jsonResponse))",
											"        .to.match(/length invalid/i)",
											"        .and.to.match(/range/i);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"origin\": \"https://www.google.com\",\n    \"backhalf\": \"\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/links",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"links"
									]
								}
							},
							"response": []
						},
						{
							"name": "👎 backhalf too long",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"function randomString(length) {",
											"    return \"a\".repeat(length)",
											"}",
											"",
											"const maxLength = 20",
											"pm.variables.set('backhalfTooLong', randomString(maxLength + 1));"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"const jsonResponse = pm.response.json()",
											"",
											"pm.test(\"Status code is 400\", function() {",
											"    pm.response.to.have.status(400);",
											"});",
											"",
											"pm.test(\"Error response schema is valid\", function () {",
											"    const validate = ajv.getSchema(schema.error.$id);",
											"    pm.expect(validate(jsonResponse), utils.errorMsg(validate.errors)).to.be.true;",
											"});",
											"",
											"pm.test(\"Error message describes problem\", function () {",
											"    pm.expect(test.errorMsg(jsonResponse))",
											"        .to.match(/length invalid/i)",
											"        .and.to.match(/range/i);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"origin\": \"https://www.google.com\",\n    \"backhalf\": \"{{backhalfTooLong}}\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/links",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"links"
									]
								}
							},
							"response": []
						},
						{
							"name": "👎 link already exists",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"test.before()",
											"test.use(pm).otherUser().createLink('https://www.bing.com')"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"const jsonResponse = pm.response.json()",
											"",
											"pm.test(\"Status code is 400\", function() {",
											"    pm.response.to.have.status(400);",
											"});",
											"",
											"pm.test(\"Error response schema is valid\", function () {",
											"    const validate = ajv.getSchema(schema.error.$id);",
											"    pm.expect(validate(jsonResponse), utils.errorMsg(validate.errors)).to.be.true;",
											"});",
											"",
											"pm.test(\"Error message describes problem\", function () {",
											"    pm.expect(test.errorMsg(jsonResponse)).to.match(/already taken/i);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"origin\": \"https://www.google.com\",\n    \"backhalf\": \"{{createdLink}}\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/links",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"links"
									]
								}
							},
							"response": []
						}
					],
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						}
					]
				},
				{
					"name": "when deleting a link",
					"item": [
						{
							"name": "👍 link owned by the user",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"test.before()",
											"",
											"const linkToDelete = pm.request.url.variables.get('backhalf')",
											"test.use(pm).currentUser().createLink('https://wwww.google.com', linkToDelete)"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is OK\", function() {",
											"    pm.expect(pm.response.code).to.be.oneOf([200, 204])",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/links/:backhalf",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"links",
										":backhalf"
									],
									"variable": [
										{
											"key": "backhalf",
											"value": "delete-link-1"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "👎 link does not exist",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"const jsonResponse = pm.response.json()",
											"",
											"pm.test(\"Status code is 403\", function() {",
											"    pm.response.to.have.status(403);",
											"});",
											"",
											"pm.test(\"Error response schema is valid\", function () {",
											"    const validate = ajv.getSchema(schema.error.$id);",
											"    pm.expect(validate(jsonResponse), utils.errorMsg(validate.errors)).to.be.true;",
											"});",
											"",
											"pm.test(\"Error message describes problem\", function () {",
											"    pm.expect(test.errorMsg(jsonResponse)).to.match(/not allowed/i)",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/links/:backhalf",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"links",
										":backhalf"
									],
									"variable": [
										{
											"key": "backhalf",
											"value": "404"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "👎 link not owned by the user",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"test.before()",
											"",
											"const linkToDelete = pm.request.url.variables.get('backhalf')",
											"test.use(pm).otherUser().createLink('https://wwww.google.com', linkToDelete)"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"const jsonResponse = pm.response.json()",
											"",
											"pm.test(\"Status code is 403\", function() {",
											"    pm.response.to.have.status(403);",
											"});",
											"",
											"pm.test(\"Error response schema is valid\", function () {",
											"    const validate = ajv.getSchema(schema.error.$id);",
											"    pm.expect(validate(jsonResponse), utils.errorMsg(validate.errors)).to.be.true;",
											"});",
											"",
											"pm.test(\"Error message describes problem\", function () {",
											"    pm.expect(test.errorMsg(jsonResponse)).to.match(/not allowed to delete/i);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/links/:backhalf",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"links",
										":backhalf"
									],
									"variable": [
										{
											"key": "backhalf",
											"value": "delete-link-3"
										}
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "when updating a link",
					"item": [
						{
							"name": "👍 link owned by the user and new backhalf valid",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"const linkToUpdate = pm.request.url.variables.get('backhalf');",
											"test.use(pm).currentUser().createLink('https://www.google.com', linkToUpdate)"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"const jsonResponse = pm.response.json()",
											"",
											"pm.test(\"Status code is 200\", function() {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Response schema is valid\", function () {",
											"    const validate = ajv.getSchema(schema.link.$id);",
											"    pm.expect(validate(jsonResponse), utils.errorMsg(validate.errors)).to.be.true;",
											"});",
											"",
											"pm.test(\"Requested attributes are updated\", function () {",
											"    const jsonRequest = JSON.parse(request.data);",
											"    pm.expect(jsonResponse).to.have.property('backhalf', jsonRequest.backhalf);",
											"});",
											"",
											"pm.test(\"Owner is auth user\", function () {",
											"    pm.expect(jsonResponse).to.have.property('user', test.currentUser().email);",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PATCH",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"backhalf\": \"updated-backhalf\"\n}"
								},
								"url": {
									"raw": "{{baseUrl}}/links/:backhalf",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"links",
										":backhalf"
									],
									"variable": [
										{
											"key": "backhalf",
											"value": "update-link-1"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "👍 link owned by the user and new URL valid",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"const linkToUpdate = pm.request.url.variables.get('backhalf');",
											"test.use(pm).currentUser().createLink('https://www.google.com', linkToUpdate)"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"const jsonResponse = pm.response.json()",
											"",
											"pm.test(\"Status code is 200\", function() {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Response schema is valid\", function () {",
											"    const validate = ajv.getSchema(schema.link.$id);",
											"    pm.expect(validate(jsonResponse), utils.errorMsg(validate.errors)).to.be.true;",
											"});",
											"",
											"pm.test(\"Requested attributes are updated\", function () {",
											"    const jsonRequest = JSON.parse(request.data);",
											"    pm.expect(jsonResponse).to.have.property('origin', jsonRequest.origin);",
											"});",
											"",
											"pm.test(\"Owner is auth user\", function () {",
											"    pm.expect(jsonResponse).to.have.property('user', test.currentUser().email);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PATCH",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"origin\": \"https://www.bing.com\"\n}"
								},
								"url": {
									"raw": "{{baseUrl}}/links/:backhalf",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"links",
										":backhalf"
									],
									"variable": [
										{
											"key": "backhalf",
											"value": "update-link-2"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "👎 link owned by the user but URL invalid",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"const linkToUpdate = pm.request.url.variables.get('backhalf');",
											"test.use(pm).currentUser().createLink('https://www.google.com', linkToUpdate)"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"const jsonResponse = pm.response.json()",
											"",
											"pm.test(\"Status code is 400\", function() {",
											"    pm.response.to.have.status(400);",
											"});",
											"",
											"pm.test(\"Error response schema is valid\", function () {",
											"    const validate = ajv.getSchema(schema.error.$id);",
											"    pm.expect(validate(jsonResponse), utils.errorMsg(validate.errors)).to.be.true;",
											"});",
											"",
											"pm.test(\"Error message describes problem\", function () {",
											"    pm.expect(test.errorMsg(jsonResponse)).to.match(/is invalid/i);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PATCH",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"origin\": \"www.bing.com\"\n}"
								},
								"url": {
									"raw": "{{baseUrl}}/links/:backhalf",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"links",
										":backhalf"
									],
									"variable": [
										{
											"key": "backhalf",
											"value": "update-link-3"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "👎 link owned by the user but backhalf invalid",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"const linkToUpdate = pm.request.url.variables.get('backhalf');",
											"test.use(pm).currentUser().createLink('https://www.google.com', linkToUpdate)"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"const jsonResponse = pm.response.json()",
											"",
											"pm.test(\"Status code is 400\", function() {",
											"    pm.response.to.have.status(400);",
											"});",
											"",
											"pm.test(\"Error response schema is valid\", function () {",
											"    const validate = ajv.getSchema(schema.error.$id);",
											"    pm.expect(validate(jsonResponse), utils.errorMsg(validate.errors)).to.be.true;",
											"});",
											"",
											"pm.test(\"Error message describes problem\", function () {",
											"    pm.expect(test.errorMsg(jsonResponse)).to.match(/does not match/i);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PATCH",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"backhalf\": \"invalid chr*ter$\"\n}"
								},
								"url": {
									"raw": "{{baseUrl}}/links/:backhalf",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"links",
										":backhalf"
									],
									"variable": [
										{
											"key": "backhalf",
											"value": "update-link-4"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "👎 link does not exist",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"const jsonResponse = pm.response.json()",
											"",
											"pm.test(\"Status code is 403\", function() {",
											"    pm.response.to.have.status(403);",
											"});",
											"",
											"pm.test(\"Error response schema is valid\", function () {",
											"    const validate = ajv.getSchema(schema.error.$id);",
											"    pm.expect(validate(jsonResponse), utils.errorMsg(validate.errors)).to.be.true;",
											"});",
											"",
											"pm.test(\"Error message describes problem\", function () {",
											"    pm.expect(test.errorMsg(jsonResponse)).to.match(/not allowed/i);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PATCH",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"origin\": \"https://www.nevermind.com/\"\n}"
								},
								"url": {
									"raw": "{{baseUrl}}/links/:backhalf",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"links",
										":backhalf"
									],
									"variable": [
										{
											"key": "backhalf",
											"value": "404"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "👎 link owned by another user",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"const linkToUpdate = pm.request.url.variables.get('backhalf');",
											"test.use(pm).otherUser().createLink('https://www.google.com', linkToUpdate)"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"const jsonResponse = pm.response.json()",
											"",
											"pm.test(\"Status code is 403\", function() {",
											"    pm.response.to.have.status(403);",
											"});",
											"",
											"pm.test(\"Error response schema is valid\", function () {",
											"    const validate = ajv.getSchema(schema.error.$id);",
											"    pm.expect(validate(jsonResponse), utils.errorMsg(validate.errors)).to.be.true;",
											"});",
											"",
											"pm.test(\"Error message describes problem\", function () {",
											"    pm.expect(test.errorMsg(jsonResponse)).to.match(/not allowed to update/i);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PATCH",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"origin\": \"https://www.bing.com\"\n}"
								},
								"url": {
									"raw": "{{baseUrl}}/links/:backhalf",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"links",
										":backhalf"
									],
									"variable": [
										{
											"key": "backhalf",
											"value": "update-link-6"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "👎 new backhalf already taken",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"const linkToUpdate = pm.request.url.variables.get('backhalf');",
											"const linkFromOtherUser = JSON.parse(request.data).backhalf;",
											"test.use(pm)",
											"test.currentUser().createLink('https://www.google.com', linkToUpdate)",
											"test.otherUser().createLink('https://www.google.com', linkFromOtherUser)"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"const jsonResponse = pm.response.json()",
											"",
											"pm.test(\"Status code is 400\", function() {",
											"    pm.response.to.have.status(400);",
											"});",
											"",
											"pm.test(\"Error response schema is valid\", function () {",
											"    const validate = ajv.getSchema(schema.error.$id);",
											"    pm.expect(validate(jsonResponse), utils.errorMsg(validate.errors)).to.be.true;",
											"});",
											"",
											"pm.test(\"Error message describes problem\", function () {",
											"    pm.expect(test.errorMsg(jsonResponse)).to.match(/already taken/i);",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PATCH",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"backhalf\": \"taken\"\n}"
								},
								"url": {
									"raw": "{{baseUrl}}/links/:backhalf",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"links",
										":backhalf"
									],
									"variable": [
										{
											"key": "backhalf",
											"value": "update-link-7"
										}
									]
								}
							},
							"response": []
						}
					]
				}
			],
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"type": "text/javascript",
						"exec": [
							"test.use(pm)",
							"test.user(0).setAsCurrent()",
							"test.user(1).setAsOther()"
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				}
			]
		},
		{
			"name": "a non activated user",
			"item": [
				{
					"name": "👎 delete a link",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/links/:backhalf",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"links",
								":backhalf"
							],
							"variable": [
								{
									"key": "backhalf",
									"value": "non-activated-delete"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "👎 list links",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/links",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"links"
							]
						}
					},
					"response": []
				},
				{
					"name": "👎 create links",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"origin\": \"https://www.google.com\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/links",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"links"
							]
						}
					},
					"response": []
				},
				{
					"name": "👎 update a link",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PATCH",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"backhalf\": \"non-activated-update\"\n}"
						},
						"url": {
							"raw": "{{baseUrl}}/links/:backhalf",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"links",
								":backhalf"
							],
							"variable": [
								{
									"key": "backhalf",
									"value": "test-link-HMGeUdkrz2"
								}
							]
						}
					},
					"response": []
				}
			],
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"type": "text/javascript",
						"exec": [
							"test.before()",
							"",
							"test.use(pm).nonActivatedUser().setAsCurrent()"
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"type": "text/javascript",
						"exec": [
							"const jsonResponse = pm.response.json()",
							"",
							"pm.test(\"Status code is 403\", function() {",
							"    pm.response.to.have.status(403);",
							"});",
							"",
							"pm.test(\"Error response schema is valid\", function () {",
							"    const validate = ajv.getSchema(schema.error.$id);",
							"    pm.expect(validate(jsonResponse), utils.errorMsg(validate.errors)).to.be.true;",
							"});",
							"",
							"pm.test(\"Error message describes problem\", function () {",
							"    pm.expect(test.errorMsg(jsonResponse)).to.match(/user account not activated/i);",
							"});"
						]
					}
				}
			]
		},
		{
			"name": "tear down",
			"item": [
				{
					"name": "AWS auth",
					"item": [
						{
							"name": "Delete user",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"if (!pm.variables.has(\"userNo\")) {",
											"    console.log(\"** AWS AUTH BEGIN **\")",
											"    pm.variables.set(\"userNo\", 0)",
											"}",
											"",
											"const userNo = pm.variables.get(\"userNo\")",
											"test.use(pm).user(userNo).setAsCurrent()"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"if (pm.response.code === 200) {",
											"  console.log(`Test user ${pm.variables.get(\"testEmail\")} deleted`)",
											"}",
											"",
											"const userNo = pm.variables.get(\"userNo\")",
											"if (test.use(pm).user(userNo + 1) !== undefined) {",
											"   pm.variables.set(\"userNo\", userNo + 1)",
											"   postman.setNextRequest(\"Delete user\")",
											"} else {",
											"    console.log(\"** AWS AUTH END **\")",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "X-Amz-Target",
										"value": "AWSCognitoIdentityProviderService.AdminDeleteUser",
										"type": "text"
									},
									{
										"key": "Content-Type",
										"value": "application/x-amz-json-1.1",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"Username\": \"{{testUser}}\",\n    \"UserPoolId\": \"{{cognitoUserPoolId}}\"\n}\n",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "https://cognito-idp.{{awsRegion}}.amazonaws.com/",
									"protocol": "https",
									"host": [
										"cognito-idp",
										"{{awsRegion}}",
										"amazonaws",
										"com"
									],
									"path": [
										""
									]
								}
							},
							"response": []
						}
					],
					"auth": {
						"type": "awsv4",
						"awsv4": [
							{
								"key": "service",
								"value": "cognito-idp",
								"type": "string"
							},
							{
								"key": "region",
								"value": "{{awsRegion}}",
								"type": "string"
							},
							{
								"key": "secretKey",
								"value": "{{secretAccessKey}}",
								"type": "string"
							},
							{
								"key": "accessKey",
								"value": "{{accessKey}}",
								"type": "string"
							}
						]
					},
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						}
					]
				}
			]
		}
	],
	"auth": {
		"type": "bearer",
		"bearer": [
			{
				"key": "token",
				"value": "{{idToken}}",
				"type": "string"
			}
		]
	},
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"exec": [
					"schema = {}",
					"",
					"schema.link = {",
					"    $id: \"http://example.com/linkSchema.json\",",
					"    type: \"object\",",
					"    properties: {",
					"        origin: { type: \"string\" },",
					"        backhalf: { type: \"string\" },",
					"        user: { type: \"string\" },",
					"        url: { type: \"string\" },",
					"        created_at: { type: \"string\", format: \"isodate\" },",
					"        updated_at: { type: \"string\", format: \"isodate\" }",
					"    },",
					"    required: [\"origin\", \"backhalf\", \"url\", \"created_at\", \"user\"],",
					"    additionalProperties: false",
					"}",
					"",
					"schema.links = {",
					"    $id: \"http://example.com/linkListSchema.json\",",
					"    type: \"object\",",
					"    properties: {",
					"        data: {",
					"            type: \"array\",",
					"            items: {",
					"                $ref: \"linkSchema.json\"",
					"            }",
					"        }",
					"    },",
					"    required: [\"data\"],",
					"    additionalProperties: false",
					"}",
					"",
					"schema.error = {",
					"    $id: \"http://example.com/apiError.json\",",
					"    type: \"object\",",
					"    properties: {",
					"        message: { type: \"string\" },",
					"    },",
					"    required: [\"message\"],",
					"    additionalProperties: false",
					"}",
					"",
					"const Ajv = require(\"ajv\")",
					"ajv = new Ajv({ logger: console, allErrors: true })",
					"ajv.addSchema(schema)",
					"// 2024-02-20 06:31:40.942851",
					"ajv.addFormat(\"isodate\", \"^\\\\d{4}-\\\\d{2}-\\\\d{2} \\\\d{2}:\\\\d{2}:\\\\d{2}\\\\.\\\\d+$\")",
					"",
					"utils = {",
					"    /**",
					"     * Formatted AJV Error Messages",
					"     * @see https://ajv.js.org/api.html#validation-errors",
					"     */",
					"    errorMsg(err) {",
					"        if (!err) {",
					"            return true;",
					"        }",
					"        console.log(err);",
					"        return err.map(e => `\\`data${e.dataPath}\\` ${e.message}`).join(', ')",
					"    },",
					"};",
					"",
					"function createLink(user, origin, backhalf) {",
					"    if (backhalf) {",
					"        console.log(`Creating link pointing to '${origin}'`);",
					"    } else {",
					"        console.log(`Creating custom link '${backhalf}' pointing to '${origin}'`);",
					"    }",
					"    pm.sendRequest({",
					"        url: pm.environment.get('baseUrl') + '/links',",
					"        method: 'POST',",
					"        header: {",
					"            'content-type': 'application/json',",
					"            'authorization': 'Bearer ' + user.getIdToken()",
					"        },",
					"        ...JSONBody({ origin, backhalf }),",
					"    }, function (err, res) {",
					"        handleRes(err, res);",
					"        if (res.code === 201) {",
					"            const backhalf = res.json().backhalf;",
					"            console.log(`User ${user.email} created link ${backhalf}`);",
					"            pm.variables.set('createdLink', backhalf);",
					"        }",
					"    });",
					"}",
					"",
					"test = {",
					"    // use the postman object from the tests, which is different from that of the pre-request script",
					"    use(p) {",
					"        pm = p",
					"        return this",
					"    },",
					"    // return the message field from an error response",
					"    errorMsg(res) {",
					"        return res.message",
					"    },",
					"    currentUser() {",
					"        return test.user(pm.variables.get(\"currentUser\"))",
					"    },",
					"    otherUser() {",
					"        return test.user(pm.variables.get(\"otherUser\"))",
					"    },",
					"    nonActivatedUser() {",
					"        return test.user(pm.variables.get(\"nonActivatedUser\"))",
					"    },",
					"    user(n) {",
					"        const testUsers = JSON.parse(pm.variables.get(`testUsers`))",
					"        const testEmails = JSON.parse(pm.variables.get(`testEmails`))",
					"        if (n >= testUsers.length) {",
					"            return;",
					"        }",
					"        return {",
					"            name: testUsers[n],",
					"            email: testEmails[n],",
					"            setIdToken(token) {",
					"                pm.variables.set(`idToken${n}`, token)",
					"            },",
					"            getIdToken() {",
					"                return pm.variables.get(`idToken${n}`)",
					"            },",
					"            setAsCurrent() {",
					"                pm.variables.set(\"currentUser\", n)",
					"                pm.variables.set(\"idToken\", pm.variables.get(`idToken${n}`))",
					"                pm.variables.set(\"testUser\", testUsers[n])",
					"                pm.variables.set(\"testEmail\", testEmails[n])",
					"            },",
					"            setAsOther() {",
					"                pm.variables.set(\"otherUser\", n)",
					"            },",
					"            createLink(origin, backhalf) {",
					"                createLink(this, origin, backhalf)",
					"            },",
					"        }",
					"    },",
					"    before() {",
					"        console.log(`** before ** ${request.name}`)",
					"    },",
					"    after() {",
					"        console.log(`** after ** ${request.name}`)",
					"    },",
					"    runIf(condition, testName, testFn) {",
					"        (condition ? pm.test : pm.test.skip)(testName, testFn)",
					"    },",
					"    skipCurrentRequest() {",
					"        console.log(`Skipped '${request.name}'`)",
					"        pm.request.url = \"postman-echo.com/get\"",
					"        pm.request.method = \"get\"",
					"    },",
					"}",
					"",
					"",
					"function JSONBody(data) {",
					"    return {",
					"        body: {",
					"            mode: 'raw',",
					"            raw: JSON.stringify(data),",
					"        }",
					"    }",
					"}",
					"",
					"function handleRes(err, res) {",
					"    if (err) {",
					"        console.error(err);",
					"    } else if (![200, 201, 204].includes(res.code)) {",
					"        console.error(res.json().message);",
					"    }",
					"}"
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		}
	],
	"variable": [
		{
			"key": "testUsers",
			"value": "[\"testuser1\", \"testuser2\", \"testuser3\"]"
		},
		{
			"key": "testEmails",
			"value": "[\"test1@dev.migueli.to\", \"test2@dev.migueli.to\", \"test@gmail.com\"]"
		},
		{
			"key": "testPassword",
			"value": "yourPa$sword12345"
		},
		{
			"key": "awsAccessKeyId",
			"value": "<aws-access-key>",
			"type": "string"
		},
		{
			"key": "awsSecretAccessKey",
			"value": "<aws-secret-access-key>",
			"type": "string"
		},
		{
			"key": "nonActivatedUser",
			"value": "2",
			"type": "string"
		}
	]
}